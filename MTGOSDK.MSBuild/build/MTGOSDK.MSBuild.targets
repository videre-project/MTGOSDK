<Project>

  <!--
    Using `TaskHostFactory` ensures that the task assembly will not be locked
    at the end of the build. If it's omitted, that can cause build failures
    in subsequent builds because the task assembly can't be overwritten.
  -->
  <UsingTask AssemblyFile="$(_MTGOSDK_MSBuild)"
             TaskName="ExtractMTGOInstallation"
             TaskFactory="TaskHostFactory" />
  <UsingTask AssemblyFile="$(_MTGOSDK_MSBuild)"
             TaskName="GenerateReferenceAssemblies"
             TaskFactory="TaskHostFactory" />

  <ItemGroup>
    <!--
      Add a `ProjectReference` to ensure that the task is built before being
      called in a consuming project. This is necessary because the task assembly
      is not referenced to be built by default, which will fail the build.
    -->
    <ProjectReference Include="..\MTGOSDK.MSBuild\MTGOSDK.MSBuild.csproj"
                      ReferenceOutputAssembly="false" />
  </ItemGroup>

  <Target Name="GenerateReferenceAssemblies"
          BeforeTargets="CoreCompile"
          DependsOnTargets="ResolveProjectReferences;ResolveAssemblyReferences">
    <!--
      Extract the MTGO installation directory paths, or create a temporary
      extraction directory if no existing MTGO installation could be found.
    -->
    <ExtractMTGOInstallation
        MTGOAppDir="$(MTGOAppDir)"
        MTGODataDir="$(MTGODataDir)">
      <!-- Expand the glob to the (local) MTGO install/user directories -->
      <Output TaskParameter="MTGOAppDir" PropertyName="MTGOAppDir" />
      <Output TaskParameter="MTGODataDir" PropertyName="MTGODataDir" />
      <!-- Output the MTGO version for use in the consuming project -->
      <Output TaskParameter="Version" PropertyName="MTGOVersion" />
    </ExtractMTGOInstallation>

    <Message Text="MTGOSDK.MSBuild: Extracted MTGO version $(MTGOVersion)"
             Importance="high" />

    <!--
      We build reference assemblies from the latest MTGO installation directory
      to ensure that we're only targeting the latest APIs of the MTGO client.

      This also ensures that we don't bundle any MTGO binaries containing
      implementation details or private APIs that we don't want to redistribute.
    -->
    <GenerateReferenceAssemblies
        MTGOAppDir="$(MTGOAppDir)"
        Version="$(MTGOVersion)"
        OutputPath="$(_MTGOSDK_Refs)">
      <!--
        Updates the internal reference path to reflect the new subpath.

        Note that this is only resolved after project dependencies are resolved,
        and cannot be used as part of any `Reference` item groups.
      -->
      <Output TaskParameter="OutputPath" PropertyName="_MTGOSDK_Refs" />
    </GenerateReferenceAssemblies>

    <!-- TODO: Verify the output reference assemblies w/ ILVerify -->
    <Message Text="MTGOSDK.MSBuild: Updated reference assemblies for MTGO version $(MTGOVersion)"
             Importance="high" />
    <Message Text="MTGOSDK.MSBuild: Reference assemblies are located at $(_MTGOSDK_Refs)"
             Importance="high" />

    <PropertyGroup>
      <!--
        We need to set the `ReferencePath` property to include the path to the
        MTGO reference assemblies so that consuming projects can resolve them.
      -->
      <ReferencePath>$(ReferencePath);$(_MTGOSDK_Refs)</ReferencePath>
    </PropertyGroup>
  </Target>

</Project>
