name: Test
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed

env:
  WORKSPACE_PATH: D:\workspace

permissions:
  statuses: write

concurrency:
  group: test-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    name: "Run SDK Tests"
    runs-on: windows-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Setup Dev Drive and Checkout
        id: setup_dev_drive_checkout
        uses: videre-project/MTGOSDK/.github/actions/setup-dev-drive@main
        with:
          ref: ${{ github.event.workflow_run.head_commit.id }}

      - name: Update Commit Status - Pending
        uses: ./.github/actions/update-commit-status
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_sha }}
          state: 'pending'
          description: 'SDK tests are running...'
          status_context: 'Test / Run SDK Tests'

      - name: Download MTGOSDK Feed
        uses: ./.github/actions/download-artifact
        with:
          name: mtgosdk-feed
          path: ${{ env.WORKSPACE_PATH }}/packages
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup .NET Environment
        uses: ./.github/actions/setup-dotnet
        with:
          WORKSPACE_PATH: ${{ env.WORKSPACE_PATH }}
          SKIP_RESTORE: 'true'

      # Create .env file for integration tests
      - name: Create .env file
        run: |
          echo "USERNAME=${{ secrets.USERNAME }}" > .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
        shell: powershell
        working-directory: ${{ env.WORKSPACE_PATH }}

      # Run the test suite
      #
      # This will re-run restore for the MTGOSDK.Tests project only, which
      # should ensure that our end-to-end test project can correctly resolve
      # our SDK packages from the local feed without any transitive information
      # leaking in from the main solution restore.
      #
      - name: Run tests
        run: dotnet test MTGOSDK.Tests -p:UseLocalFeed=True
        shell: powershell
        working-directory: ${{ env.WORKSPACE_PATH }}

      # Upload the Diver logs for debugging test failures or crashes
      - if: ${{ failure() }}
        name: Upload Diver Logs
        uses: actions/upload-artifact@v4
        with:
          name: diver-logs
          path: ${{ env.LOCALAPPDATA }}/MTGOSDK/Logs/*
          retention-days: 7

      # Upload the MSBuild binary log
      - if: ${{ always() }}
        name: Upload Binary Log
        uses: actions/upload-artifact@v4
        with:
          name: msbuild-binlog
          path: ${{ env.WORKSPACE_PATH }}/logs/msbuild.binlog
          retention-days: 7

      # Show the test log
      - if: ${{ always() }}
        run: |
          $TEST_LOG_PATH = Get-ChildItem -Path $env:WORKSPACE_PATH\MTGOSDK.Tests\bin\* -Recurse -Include *.testresults-*.log | Select-Object -First 1 -ExpandProperty FullName
          foreach ($line in Get-Content -Path $TEST_LOG_PATH) {
            Write-Host $line
          }
        shell: powershell

      - if: always()
        run: |
          $TEST_RESULTS_PATH = Get-ChildItem -Path $env:WORKSPACE_PATH\MTGOSDK.Tests\bin\* -Recurse -Include *.testresults | Select-Object -First 1 -ExpandProperty FullName
          if (-not $TEST_RESULTS_PATH) {
            Write-Output "TEST_RESULTS_LABEL=Critical error" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "TEST_RESULTS_DESCRIPTION=Test workflow failed" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            $testCount = (Get-Content $TEST_RESULTS_PATH | Where-Object {$_.Trim() -ne ""} | Measure-Object -Line).Lines
            $successCount = (Select-String -Path $TEST_RESULTS_PATH -Pattern 'Success' | Measure-Object).Count

            # Calculate the total duration of all tests in the test results file
            $duration = (Select-String -Path $TEST_RESULTS_PATH -Pattern 'Took' | ForEach-Object {
              $_.ToString().Split(' ')[-2].TrimEnd('s')
            } | Measure-Object -Sum).Sum
            $formattedDuration = if ($duration -ge 60) {
              "{0}m {1}s" -f [math]::Floor($duration / 60), ($duration % 60)
            } else {
              "{0}s" -f $duration
            }

            if ($env:TEST_RESULT -eq 'success') {
              Write-Output "TEST_RESULTS_LABEL=Successful in $formattedDuration" |
                Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            } else {
              Write-Output "TEST_RESULTS_LABEL=Failing after $formattedDuration" |
                Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            }

            Write-Output "TEST_RESULTS_DESCRIPTION=$successCount/$testCount tests passed" |
              Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
        shell: powershell
        env:
          # Report success or failure based on the workflow run status
          TEST_RESULT: ${{ job.status == 'success' && 'success' || 'failure' }}

      - name: Update Commit Status - Result
        if: always()
        uses: ./.github/actions/update-commit-status
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ github.event.workflow_run.head_sha }}
          state: ${{ job.status }}
          description: '${{ env.TEST_RESULTS_LABEL }} - ${{ env.TEST_RESULTS_DESCRIPTION }}'
          status_context: 'Test / Run SDK Tests'
