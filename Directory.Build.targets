<Project>

  <Target Name="CleanProject"
          BeforeTargets="Clean">
    <ItemGroup>
      <FoldersToClean Include="$(DistDir)" />
      <FoldersToClean Include="$(FeedOutputPath)"
                      Condition="'$(UseLocalFeed)' != 'true'" />
      <FoldersToClean Include="$(PackageOutputPath)"
                      Condition="'$(UseLocalFeed)' != 'true'" />
      <FoldersToClean Include="$(MSBuildProjectDirectory)\bin" />
      <FoldersToClean Include="$(MSBuildProjectDirectory)\logs" />
      <FoldersToClean Include="$(MSBuildProjectDirectory)\obj" />
      <FoldersToClean Include="$(MSBuildProjectDirectory)\html-coverage-report" />
      <FilesToClean Include="$(MSBuildProjectDirectory)\coverage.cobertura.xml" />
      <FilesToClean Include="$(MSBuildProjectDirectory)\coverage.json" />
    </ItemGroup>
    <RemoveDir Directories="@(FoldersToClean)" />
    <Delete Files="@(FilesToClean)" />
  </Target>

  <Target Name="PreBuildTimestamp"
          BeforeTargets="CoreCompile">
    <PropertyGroup>
      <BaseProjectOutputPath>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)</BaseProjectOutputPath>
    </PropertyGroup>
    <ItemGroup>
      <ProjectOutputFiles Include="$(BaseProjectOutputPath)$(MSBuildProjectName).exe;
                                   $(BaseProjectOutputPath)$(MSBuildProjectName).dll" />
      <ProjectOutputFiles Remove="@(_ProjectOutputFiles)"
                          Condition="!Exists('%(Identity)')" />

      <ProjectUp2DateFile Include="$(BaseProjectOutputPath)$(MSBuildProjectName).csproj.Up2Date;
                                   $(BaseProjectOutputPath)$(MSBuildProjectName).Version.cs.new" />
      <ProjectUp2DateFile Remove="@(ProjectUp2DateFile)"
                          Condition="!Exists('%(Identity)')" />
    </ItemGroup>
    <PropertyGroup Condition="'$(IsBuildRunningInTest)' == 'false'">
      <OutputTimeStampBeforeBuild>%(ProjectOutputFiles.ModifiedTime)</OutputTimeStampBeforeBuild>
      <HasBuildRegenerated Condition="@(ProjectOutputFiles -> Count()) == 0">True</HasBuildRegenerated>
    </PropertyGroup>
  </Target>

  <UsingTask
    TaskName="CompareDates"
    TaskFactory="RoslynCodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <FirstDate  ParameterType="System.DateTime" Required="true" />
      <SecondDate ParameterType="System.DateTime" Required="true" />
      <Difference ParameterType="System.Double"   Required="true" />
      <Result     ParameterType="System.Boolean"  Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          double ToSeconds(DateTime date) => TimeSpan.FromTicks(date.Ticks).TotalSeconds;
          if (ToSeconds(FirstDate) <= ToSeconds(SecondDate) && Difference != 0.0)
            Result = false;
          else
            Result = (ToSeconds(FirstDate) - ToSeconds(SecondDate)) > Difference;
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="PostBuildTimestamp"
          AfterTargets="CoreCompile">
    <!-- Compare timestamps of the output files before and after build -->
    <PropertyGroup>
      <OutputTimeStampAfterBuild>%(ProjectOutputFiles.ModifiedTime)</OutputTimeStampAfterBuild>
    </PropertyGroup>
    <CompareDates FirstDate="$(OutputTimeStampAfterBuild)"
                  SecondDate="$(OutputTimeStampBeforeBuild)"
                  Difference="1.00"
                  Condition="'$(OutputTimeStampBeforeBuild)' != ''">
      <Output TaskParameter="Result" PropertyName="HasTimestampUpdated" />
    </CompareDates>
    <PropertyGroup Condition="'$(HasTimestampUpdated)' == ''">
      <HasTimestampUpdated>True</HasTimestampUpdated>
    </PropertyGroup>

    <PropertyGroup>
      <OutputFilesModified>false</OutputFilesModified>
      <OutputFilesModified Condition="'$(HasTimestampUpdated)' == 'True'">true</OutputFilesModified>
    </PropertyGroup>
  </Target>

  <Target Name="SkipPostCompile"
          BeforeTargets="CopyFilesToOutputDirectory"
          AfterTargets="GenerateDependencyFile"
          Condition="'$(OutputFilesModified)' == 'false'">
    <ItemGroup>
      <ProjectFileWrites Include="@(FileWrites)"
                         Condition="'%(Extension)' == '.exe' Or
                                    '%(Extension)' == '.dll' Or
                                    '%(Extension)' == '.pdb'" />
    </ItemGroup>
    <PropertyGroup Condition="@(ProjectFileWrites -> Count()) > 0">
      <SkipCopyBuildProduct>true</SkipCopyBuildProduct>
    </PropertyGroup>
  </Target>

  <Target Name="OverrideIncrementalClean"
          BeforeTargets="IncrementalClean"
          AfterTargets="_CleanGetCurrentAndPriorFileWrites"
          Condition="'$(OutputFilesModified)' == 'false' And
                     '$(SkipCopyBuildProduct)' == 'true'">
    <ItemGroup>
      <ProjectFileWrites Include="$(OutputPath)$(MSBuildProjectName).exe;
                                  $(OutputPath)$(MSBuildProjectName).dll;
                                  $(OutputPath)$(MSBuildProjectName).pdb" />
      <_CleanPriorFileWrites Remove="@(ProjectFileWrites -> '$(MSBuildProjectDirectory)\%(RelativeDir)%(Filename)%(Extension)')"
                             Condition="Exists('%(FullPath)')" />
    </ItemGroup>
  </Target>

  <Target Name="EnsureReferencePath"
          AfterTargets="AfterBuild"
          Condition="'$(TargetRefPath)' != '' And !Exists('$(TargetRefPath)')">
    <PropertyGroup>
      <TargetRefExt>$([System.IO.Path]::GetExtension($(TargetRefPath)))</TargetRefExt>
      <TargetRefDir>$([System.IO.Path]::GetDirectoryName($(TargetRefPath)))</TargetRefDir>
    </PropertyGroup>
    <Copy SourceFiles="$(MSBuildProjectDirectory)\$(IntermediateOutputPath)$(MSBuildProjectName)$(TargetRefExt)"
          DestinationFolder="$(TargetRefDir)" />
  </Target>

  <!-- Override MTGOSDK package versions to use the local package feed -->
  <Target Name="UseLocalFeedPackageVersions"
          BeforeTargets="CollectPackageReferences"
          Condition="'$(UseLocalFeed)' == 'true'">
    <PropertyGroup>
      <PrereleaseSpecifier>*-preview.*</PrereleaseSpecifier>
    </PropertyGroup>
    <ItemGroup>
      <PackageReference Update="MTGOSDK"
                        VersionOverride="$(PrereleaseSpecifier)" />
      <PackageReference Update="MTGOSDK.MSBuild"
                        VersionOverride="$(PrereleaseSpecifier)" />
      <PackageReference Update="MTGOSDK.Win32"
                        VersionOverride="$(PrereleaseSpecifier)" />
    </ItemGroup>
  </Target>

  <Target Name="UpdateFeed"
          AfterTargets="Pack"
          Condition="'$(OS)' == 'Windows_NT'">
    <!-- Query all existing package versions in the feed -->
    <PropertyGroup>
      <FeedPackagePath>$(FeedOutputPath)\$(MSBuildProjectName.ToLower())</FeedPackagePath>
    </PropertyGroup>
    <ItemGroup>
      <_SDKPackagePaths Include="$(FeedPackagePath)\**\*.nupkg" />
      <_SDKPackagePaths>
        <VersionPath>$([System.IO.Path]::GetDirectoryName('%(Identity)').Replace('$(FeedOutputPath)\', ''))</VersionPath>
      </_SDKPackagePaths>
      <_SDKPackagePaths>
        <File>$([System.IO.Path]::Combine('%(VersionPath)', 'nupkg').Replace('\', '.'))</File>
        <Version>$([System.IO.Path]::GetFileName('%(VersionPath)'))</Version>
      </_SDKPackagePaths>
    </ItemGroup>

    <!-- Clean the local feed of old package versions -->
    <RemoveDir Directories="@(_SDKPackagePaths->'$(FeedOutputPath)\%(VersionPath)');
                            @(_SDKPackagePaths->'$(NuGetPackageRoot)\%(VersionPath)')"
               Condition="Exists($(FeedPackagePath))" />

    <!-- Add the built package to the local feed -->
    <PropertyGroup>
      <PackagePath>$(PackageOutputPath)\$(MSBuildProjectName).$(PackageVersion).nupkg</PackagePath>
    </PropertyGroup>
    <Exec Command="$(NuGetExePath) add $(PackagePath) ^
                    -Source $(FeedOutputPath) ^
                    -Verbosity quiet" />
  </Target>

</Project>